<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/uikit@3.6.22/dist/js/uikit.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/uikit@3.6.22/dist/js/uikit-icons.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.6.22/dist/css/uikit.min.css" />
    <title>Document</title>
</head>
<body>
  <form action="/subirFotos" enctype="multipart/form-data" method="POST"> 
    <input type="file" name="document" />
    <input type="submit" value="Upload a file"/>
 </form>
</body>
</html>
<script>
  function imgPreviewLi(readerResult, filename) {
    const li = document.createElement("li");
    const div = document.createElement("div");
    const img = document.createElement("img");
    const span = document.createElement("span");

    li.className = "list-item uk-margin-medium-top";
    div.className = "uk-cover-container";
    img.className = "delete-img-preview";
    img.setAttribute("id", "img-preview-responsive");
    img.setAttribute("src", readerResult);
    img.setAttribute("data-name", filename);
    img.setAttribute("alt", "file-image-preview");
    span.className = "uk-text-meta uk-text-break file-upload-name";
    span.textContent = filename;

    div.append(img);
    li.append(div, span);
    return li;
  }

  function previewSingleFile(files, fileInput, preview, alert, alertMessage) {	
    const acceptedDocMimes = ["image/png", "image/jpeg"];
    const size = files[0]["size"];
    const fileType = files[0]["type"];
    let filename = files[0]["name"];
	
    if (files[0].length !== 0) {
      while(preview.firstChild) {
			  preview.removeChild(preview.firstChild);
		  }
    }

    if (size > 2000000) {
      alertMessage.textContent = "Lo sentimos, su archivo superó el límite de tamaño de archivo de 2 KB";
      alertMessage.classList.add("uk-text-danger");
      alert.classList.remove("uk-hidden");
      preview.innerHTML = "";
		  fileInput.files = [];
      console.log(`${size} is more than 2 mb`);
      return false;
    }

    if (acceptedDocMimes.includes(fileType)) {
      alertMessage.textContent = "";
      alert.classList.add("uk-hidden");

      const reader = new FileReader();
      reader.onload = () => {
        let imgPreview = imgPreviewLi(reader.result, filename);
        preview.append(imgPreview);
      };
      reader.readAsDataURL(files[0]);
		
    } else {
      alertMessage.textContent = "Lo sentimos, su tipo de archivo no está permitido";
      alertMessage.classList.add("uk-text-danger");
      alert.classList.remove("uk-hidden");
      preview.innerHTML = "";
		  fileInput.files = [];
      console.log(`${fileType} is not allowed`);
    }
  }

  let bar = document.getElementById("js-progressbar");

  UIkit.upload(".js-upload", {
    url: "",
    multiple: true,
  
    beforeSend: function() {
      // console.log('beforeSend', arguments);
    },

    beforeAll: function() {
      const files = arguments[1];
      const jsUploadEl = arguments[0].$el;
      const fileInput = jsUploadEl.querySelector(".uk-form-custom>input");
      const preview = jsUploadEl.querySelector("#preview");
      const alert = jsUploadEl.parentElement.querySelector(
        ".uk-upload-box>#error-alert-file-upload"
      );
      const alertMessage = jsUploadEl.parentElement.querySelector(
        ".uk-upload-box>#error-alert-file-upload>p"
      );
      let multiple = false;

      if (fileInput.hasAttribute("multiple")) {
        multiple = true;
        previewMultipleFiles(files, fileInput, preview, alert, alertMessage);
      } else {
        previewSingleFile(files, fileInput, preview, alert, alertMessage);
      }
    },

    load: function() {
      // console.log('load', arguments);
    },

    error: function() {
      // console.log('error', arguments);
    },

    complete: function() {
      // console.log('complete', arguments);
    },

    loadStart: function(e) {
      // console.log('loadStart', arguments);

      bar.removeAttribute("hidden");
      bar.max = e.total;
      bar.value = e.loaded;
    },

    progress: function(e) {
      // console.log('progress', arguments);

      bar.max = e.total;
      bar.value = e.loaded;
    },

    loadEnd: function(e) {
      // console.log('loadEnd', arguments);
      bar.max = e.total;
      bar.value = e.loaded;
    },

    completeAll: function() {
      // console.log('completeAll', arguments);

      setTimeout(function() {
        bar.setAttribute("hidden", "hidden");
      }, 1000);

      // alert('Upload Completed');
    }
  });
</script>